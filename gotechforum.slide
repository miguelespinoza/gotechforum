### Introduction
Go 101
Tech Forum
29 Oct 2015

Miguel Espinoza
Josh Suggs

* History of Go

* Language Designers
- Robert Griesemer
- Rob Pike
- Ken Thompson

* Influenced by
- C
- Pascal
- Smalltalk
- Oberon
- Limbo
- Newsqueak

* Why Go?
- Take advantage of the multicore computers
- Reduce build time in the development process
- Reduce complexity of features, introduce simplicity
- Difficulty in updating features with other languages
- Introduce a language with clear dependencies, syntax, and semantics

* Go!
- Easy tools necessary to compile, debug, profile, test, and run programs
- Compiled to machine code
- Strong and static type system
- Package system that allow for better reusability
- Concurrency as part of the language, not a framework
- Garbage collector


* Language Tools

* Go tools and $GOPATH
- go tool
	go run, go build, go install, go doc, go fmt
- goimports
	update import statements based on your workspace
- $GOPATH
	where all Go code resides

* Semantics

* Hello World, Again...
.play code/hello.go /START OMIT/,/END OMIT/

* Go gettable

* How can we do that?
- Create your own package!

* Go Treats
* Is Go an object-oriented language?
.image img/yes_no.jpg

* Composition over Inheritance

* Struct Embedding
.code code/phone.go /EMBD_START OMIT/,/EMBD_END OMIT/

* Initialization
.play code/phone.go /MAIN_START OMIT/,/MAIN_END OMIT/

* Interface

* Defining
.code code/phone_interface.go /INT_START OMIT/,/INT_END OMIT/
.code code/phone_interface.go /INT_IMP_START OMIT/,/INT_IMP_END OMIT/

* Using the interface
.code code/phone_interface.go /CHOOSE_START OMIT/,/CHOOSE_END OMIT/
- Wait... Where is the
	implement keyword!!!!

* Initialization
.play code/phone_interface.go /MAIN_START OMIT/,/MAIN_END OMIT/

* Error Handling

* Simplicity
.image img/exceptions.png
.image img/errors.png

* C# Error Handling
.image img/try-catch.png

* Go Error Handling
- Reduces complexity of code flow
.image img/go-error.png

* Concurrency
- Philosophy from Communicating Sequential Processes (CSP)
- goroutines
- channels
- select

* goroutines and channels
.play code/pingpong.go /MAIN_START OMIT/,/MAIN_END OMIT/

* channels
.code code/pingpong.go /TURN_START OMIT/,/TURN_END OMIT/

* select
.code code/pingpong.go /KEEPER_START OMIT/,/KEEPER_END OMIT/

* Things to be aware of
- No generics
- Go allows closures
- gomobile toolchain: create SDK libraries for Android and iOS apps
- zero values with implicit initialization
- backwards compatible versions of Go
- statements over expressions
- naming convention is real!
- simplicity, simplicity, simplicity!

* We're not alone
.image img/companies.png

* Hello there?
.image img/notimpressed.jpg

* Resources
- Why is Go, Go?
.link https://golang.org/doc/faq
.link https://talks.golang.org/2012/splash.article
- Idiomatic Go
.link https://golang.org/doc/code.html
.link https://golang.org/doc/effective_go.html
- Communities
.link https://forum.golangbridge.org/
.link http://reddit.com/r/golang
- More resources
.link http://internalwiki.acs.tech/display/RD/GO+Lang+Resources

* Hello there?
.image img/notimpressed.jpg

* Judge it for yourself, Get going with Go!
